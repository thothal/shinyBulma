% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/table.R
\name{bulma_table}
\alias{bulma_table}
\title{Create a bulma Table}
\usage{
bulma_table(
  data,
  stripes = FALSE,
  hover = FALSE,
  border = FALSE,
  narrow = FALSE,
  fullwidth = FALSE,
  scrollable = FALSE,
  align = NULL,
  row_names = FALSE,
  col_names = TRUE,
  digits = NULL,
  na = "NA",
  escape = TRUE,
  selected_row = NULL,
  convert_to_tags = requireNamespace("xml2", quietly = TRUE),
  ...
)
}
\arguments{
\item{data}{[\code{matrix-ish}]\cr
A matrix, data.frame or alike which can be processed by \code{\link[xtable:xtable]{xtable::xtable()}}.}

\item{stripes, hover, border, narrow, fullwidth}{[\code{logical(1)}: \sQuote{FALSE}]\cr
If \sQuote{TRUE}, apply the corresponding bulma table format to the table.}

\item{scrollable}{[\code{logical(1)}: \sQuote{FALSE}]\cr
If \sQuote{TRUE}, wrap the table in a scrollable container.}

\item{align}{[\code{character(1)}: \sQuote{NULL}]\cr
The alignment string, see \code{\link[shiny:renderTable]{shiny::renderTable()}} for the specification of it.}

\item{row_names, col_names}{[\code{logical(1)}: \sQuote{FALSE} and \sQuote{TRUE}]\cr
If \sQuote{TRUE}, row (column) names are included in the ouptut.}

\item{digits}{[\code{integer(1)}: \sQuote{NULL}]\cr
An integer specifying the number of decimal places for numeric columns,
see \code{\link[shiny:renderTable]{shiny::renderTable()}} for full specification.}

\item{na}{[\code{character(1)}: \sQuote{NA}]\cr
The string to use int he table cells whose values are missing.}

\item{escape}{[\code{logical(1)}: \sQuote{TRUE}]\cr
Should cell contents be escaped or printed as is (which allows arbitrary HTML
code to be included in the table, see example).}

\item{selected_row}{[\code{integer(1)}: \sQuote{NULL}]\cr
If not \sQuote{NULL}, mark the given row.}

\item{convert_to_tags}{[\code{logical(1)}: \sQuote{TRUE} if package \code{{xml2}} exists]\cr
If \sQuote{FALSE}, an \code{html} object (i.e. a string marked via
\code{\link[htmltools:HTML]{htmltools::HTML()}}), otherwise the \code{html} object is parsed to shiny tags using
library \code{{xml2}}.}

\item{...}{Arguments to be passed through to \code{\link[xtable:xtable]{xtable::xtable()}} and
\code{\link[xtable:print.xtable]{xtable::print.xtable()}}.}
}
\value{
A bulma table.
}
\description{
Create a bulma Table
}
\note{
This function is basically a copy & paste from \code{\link[shiny:renderTable]{shiny::renderTable()}}. Thus, the
workhorse function for translating the data to HTML is \code{\link[xtable:xtable]{xtable::xtable()}}. This
function, however, does return only \emph{HTML} and \strong{not} \code{htmltools::tags}. While
\code{htmltools} can work with literal HTML code via \code{\link[htmltools:HTML]{htmltools::HTML()}}, it makes
subsequent changes via \code{tagAppendAttributes} for instance impossible. Furthermore,
it would be inconsistent with the other functions in this package, if \code{bulma_table}
would return a \code{html} object and not a \code{shiny.tag}. Hence, we added a parser which
translates the HTML string into a \code{shiny.tag} with the help of package \code{xml2}.

This approach seems to be rather complicated, but it has the advantage that especially
the translation of \code{data.frame} to HTML is done by a well tested function and we do
not have to reinvent the wheel.
}
\examples{
if (interactive() && requireNamespace("shiny", quietly = TRUE)) {
   cars <- mtcars[1:5, ]
   cars[2, 3] <- NA

   ui <- bulma_page(
     bulma_block(
       bulma_title("Basic Table"),
       bulma_table(cars)
     ),
     bulma_block(
       bulma_title("Highlight a Row"),
       bulma_table(cars, selected_row = 3)
     ),
     bulma_block(
       bulma_title("Include Rownames"),
       bulma_table(cars, row_names = TRUE)
     ),
     bulma_block(
       bulma_title("Several Style Flags"),
       bulma_table(cars, stripes = TRUE, hover = TRUE, border = TRUE, narrow = TRUE,
                   fullwidth = TRUE)
     ),
     bulma_block(
       bulma_title("Format & Align Columns and NAs"),
       bulma_table(cars, align = paste(rep(c("c", "r", "l"), c(4, 4, 3)),
                                       collapse = ""),
                   na = "Missing", digits = -1)
     ),
     bulma_block(
       bulma_title("Add Custom HTML"),
       bulma_table(data.frame(`<abbr title = "Played">P</abbr>` = rep(3, 3),
                              `<abbr title = "Lost">L</abbr>` = 1:3,
                              `<abbr title = "Draw">D</abbr>` = c(1, 0, 0),
                              `<abbr title = "Won">W</abbr>` = c(1, 1, 0),
                              check.names = FALSE),
                   digits = 0,
                   escape = FALSE)
     ),
     bulma_block(
       bulma_title("Scrollable Table"),
       bulma_table(matrix(rnorm(1000), 10),
                   scrollable = TRUE)
     ),
     bulma_block(
       bulma_title("Pass Arguments to `print.xtable`"),
       bulma_table(cars,
                   html.table.attributes =
                     "style = 'background-color: steelblue; color:white'")
     )
   )
   server <- function(input, output) {
   }

   shinyApp(ui, server)
}
}
