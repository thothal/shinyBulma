% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/level.R
\name{bulma_level}
\alias{bulma_level}
\alias{bulma_level_item}
\title{Create bulma Level & bulma Level Item}
\usage{
bulma_level(
  left = NULL,
  right = NULL,
  center = NULL,
  horizontal_on_mobile = FALSE,
  container = htmltools::tags$nav,
  ...
)

bulma_level_item(
  heading = NULL,
  title = NULL,
  content = NULL,
  centered = TRUE,
  heading_on_top = TRUE,
  container = htmltools::div,
  ...
)
}
\arguments{
\item{left, right, center}{[\code{shiny.tag} or \code{listish}; \sQuote{NULL}]\cr
These elements are placed in the left or right part of the
level. Alternatively (but not simulataneously) you can set
\code{center}, in which case it will be placed horizontally
centered. Typically, you want to pass a \code{\link[htmltools:tag]{htmltools::tagList()}}
to these arguments. The function will then loop through all
elements in the list and place them in the right place.}

\item{horizontal_on_mobile}{[\code{logical(1)}: \sQuote{FALSE}]\cr
If \sQuote{TRUE}, the level is displayed horizonatlly on
mobile devices and not vertically as per default.}

\item{container}{[\code{function}]\cr
The container to be used for the bulma level or bulma level item.}

\item{...}{[\verb{html tags} or \verb{html attributes}]\cr
Further arguments passed down to \code{container}.}

\item{heading, title, content}{[shiny.tag\code{or}listish\verb{; \\sQuote\{NULL\}\]\\cr The heading, title or free content of the level item. Either one specifies heading and title to display a simple heading with a value, or one uses }content` to
freely style the content.}

\item{centered}{[\code{logical(1)}: \sQuote{TRUE}]\cr
If \sQuote{TRUE}, the content (either given by \code{heading/title} or
\code{content}) is centered using class \code{has-text-centered}.}

\item{heading_on_top}{[\code{logical(1)}: \sQuote{TRUE}]\cr
If \sQuote{TRUE}, the heading is placed on top of the title,
otherwise reversed.}
}
\value{
A bulma level and a bulma level item respectively.
}
\description{
Create bulma Level & bulma Level Item
}
\note{
Elements within a bulma level, need to have a class \code{level-item}. The function adds
this class, if the respective elment does not have it. This is done by calling
\code{bulma_level_item}, that is, the respective element is wrapped in another \verb{<div>}
element. If you do not want this behaviour, make sure that the element has the
\code{level-item} class.
}
\examples{
if (interactive() && requireNamespace("shiny", quietly = TRUE)) {
  ## replace as soon as form elements are available
  right <- tagList(
    tags$strong("All"),
    tags$a("Published"),
    tags$a("Drafts"),
    tags$a("Deleted"),
    bulma_button("New", color = "success", container = tags$a)
  )

  left <- tagList(
    bulma_subtitle(tags$strong(123)),
    tags$div(
      tags$p(
        tags$input(class = "input", type = "text", placeholder = "Find a post"),
        class = "control"
      ),
      tags$p(
        bulma_button("Search")
      ),
      class = "field has-addons"
    )
  )

  center <- tagList(
    bulma_level_item("Tweets", "3,456"),
    bulma_level_item("Following", 123),
    bulma_level_item("Followers", "456k"),
    bulma_level_item("Likes", 789)
  )

  ui <- bulma_page(
    bulma_block(
      bulma_title("Basic Level"),
      bulma_level(left, right)
    ),
    bulma_block(
      bulma_title("Centered Level"),
      bulma_block(
        bulma_level(
          center = center
        )
      ),
      bulma_block(
        bulma_level(
          center = tagList(
            bulma_level_item(content = tags$a("Home", class = "link is-info")),
            bulma_level_item(content = tags$a("Menu", class = "link is-info")),
            bulma_level_item(content = tags$img(
              alt = "",
              style = "height: 30px",
              src = "https://bulma.io/images/bulma-type.png")),
            bulma_level_item(content = tags$a("Reservations", class = "link is-info")),
            bulma_level_item(content = tags$a("contact", class = "link is-info"))
          )
        )
      )
    ),
    bulma_block(
      bulma_title("Mobile"),
      bulma_subtitle("(Resize to see effect)"),
      bulma_level(center = center, horizontal_on_mobile = TRUE)
    )
  )

  server <- function(input, output) {
  }

  shinyApp(ui, server)
}
}
\seealso{
\href{https://bulma.io/documentation/layout/level/}{Bulma Level}
}
